/**
 * Computer Programming 2 (COMP2711, COMP8801)
 * Practical 4: Words
 */

#include <iostream>
#include <string>
#include <unistd.h>
#include <algorithm>

using namespace std;

template <class T> class MyVector {
public:
    typedef T* iterator;
    MyVector(){};

    iterator begin(){
        return &items[0];
    };

    iterator end(){
        return &items[used+1];
    };

    int size(){
        return used;
    };

    iterator insert (iterator position, const T& item){
        int p = distance(begin(), position);
        for (int i=size(); i>p; i--) {
            items[i] = items[i-1];
        }
        used++;
        items[p] = item;
        return &items[p];
    };

private:
    T items[1000];
    int used = 0;
};
//----------------------------------------------------------------------
struct WordInfo{
    string text;
    int count;
};
//-----------------------------------------------------------------------

int main(int argc, char** argv)
{
    enum {
        total,
        unique,
        individual
    } mode = total;

    for (int c; (c = getopt(argc, argv, "tui")) != -1;) {
        switch (c) {
        case 't':
            mode = total;
            break;
        case 'u':
            mode = unique;
            break;
        case 'i':
            mode = individual;
            break;
        }
    }
    argc -= optind;
    argv += optind;

    MyVector<string> words;
    MyVector<WordInfo> wordInf;
    string word;

    int count = 0, uniqueItems = 0;
    while (cin >> word) {
        if(find(words.begin(),words.end(),word)==words.end()){
            words.insert(words.end(), word);
            uniqueItems++;
        }
        count = count+1;
    }

    switch (mode) {
    case total:

        cout << "Total: " << count << '\n';
        break;
    case unique:
        cout << "Unique: " << uniqueItems << '\n';
        break;
    case individual:
        cout << "Individual: " << "Not done yet" << '\n';
        break;
    }

    return 0;
}
